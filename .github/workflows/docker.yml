name: Build & Push
# Build & Push builds the finschia docker image on every tag push

on:
  pull_request:
#    branches:
#      - main
  push:
#    tags:
#      - "v[0-9]+.[0-9]+.[0-9]+" # Push events to matching v*, i.e. v1.0, v20.15.10
#      - "v[0-9]+.[0-9]+.[0-9]+-*" # Push events to matching v*, i.e. v1.0-rc1, v20.15.10-alpha1

env:
  registry: docker.io
  DOCKER_REPOSITORY: zemyblue/finschianode
  RUNNER_BASE_IMAGE_DISTROLESS: gcr.io/distroless/static-debian11
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create a context for buildx
        run: docker context create buildx
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: buildx
          config-inline: |
            [registry."docker.io"]
      - name: login to the registry
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ${{env.registry}}
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Find go version and ostracon version
        id: find_go_version
        run: |
          GO_VERSION=$(cat go.mod | grep -E 'go [0-9].[0-9]+' | cut -d ' ' -f 2)
          OST_VERSION=$(go list -m github.com/Finschia/ostracon | sed 's:.* ::')
          echo "GO_VERSION=$GO_VERSION" >> $GITHUB_ENV
          echo "OST_VERSION=$OST_VERSION" >> $GITHUB_ENV

      - name: Parse tag
        id: tag
        run: |
#          VERSION=$(echo ${{ github.ref_name }} | sed "s/v//")
          VERSION="v0.0.0-test"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: extract metadata for docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{env.registry}}/${{env.DOCKER_REPOSITORY}}
          tags: |
            type=semver,pattern={{version}}
      - name: Build and push (distroless)
        uses: docker/build-push-action@v4
        with:
          file: Dockerfile
          context: .
          push: ${{github.event_name != 'pull_request'}}
          platforms: linux/amd64, linux/arm64
          build-args:
            GO_VERSOIN=${{ env.GO_VERSION }}
            RUNNER_IMAGE=${{ env.RUNNER_BASE_IMAGE_DISTROLESS }}
            GIT_VERSION=${{ env.VERSION }}
            GIT_COMMIT=${{ github.sha }}
            OST_VERSION=${{ env.OST_VERSION }}
          tags: ${{steps.meta.outputs.tags}}
          labels: ${{steps.meta.outputs.labels}}
